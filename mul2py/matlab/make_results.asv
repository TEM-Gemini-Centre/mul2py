function [results] = make_results(multem_input, multem_output, varargin)
%make_results Make a results structure based on input and output to multem.
%   Detailed explanation goes here


%%%%%%%%%%%%%%%%%%%%%%%%% Argument Parsing %%%%%%%%%%%%%%%%%%%%%%%%
default_xs = [1];
default_ys = [1];
default_title = 'MULTEM_simulation';
default_elapsed_time = 0;

p = inputParser;
p.KeepUnmatched = true;

validScalarPosNum = @(x) isnumeric(x) && isscalar(x) && (x >= 0);
validScalarNum = @(x) isnumeric(x) && isscalar(x);
validStrChar = @(x) ischar(x) || isstring(x);
validVector = @(x) isrow(x) || iscol(x);
validMultemInput = @(x) isequal(class(x), 'multem_input.parameters');


addRequired(p, "multem_input", validMultemInput);
addRequired(p, "multem_output", isstruct);
addParameter(p, "xs", default_xs, validVector);
addParameter(p, "ys", default_ys, validVector);
addParameter(p, "title", default_title, validStrChar);
addParameter(p, "elapsed_time", default_elapsed_time, validScalarPosNum);
parse(p, multem_input, multem_output, varargin{:});
    
    
results = struct();
results.input = multem_input.toStruct();
results.dz = multem_input.spec_dz;
results.thick = multem_output.thick;
results.xs = p.Results.xs;
results.ys = p.Results.ys;
results.title = p.Results.title;
results.elapsed_time = p.Results.elapsed_time;

if isequal(multem_input.simulation_type, 11) || isequal(multem_input.simulation_type, 12)
    %STEM
    if input_multem.detector.type == 1
        detectors = length(multem_input.detector.cir);
    elseif input_multem.detector.type == 2
        detectors = length(multem_input.detector.radial);
    elseif input_multem.detector.type == 3
        detectors = length(multem_input.detector.matrix);
    else
        detectors = length(multem_output.data(1).image_tot);
    end
    results.images = zeros(input_multem.scanning_ns, input_multem.scanning_ns, length(output_multislice.data), detectors);
    if length(output_multislice.data) == 1
        for det=1:detectors
            results.images(:,:, 1, det) = transpose(output_multislice.data.image_tot(det).image);
        end
    else
        for t = 1:length(output_multislice.data)
            for det=1:detectors
                results.images(:, :, t, det) = transpose(output_multislice.data(t).image_tot(det).image);
            end
        end
    end
else
    %HRTEM and other direct data: Should not be used for custom "scanning"
    %modes
    results.dx = multem_output.dx;
    results.dy = multem_output.dy;
    results.images = zeros(input_multem.nx, input_multem.ny, length(output_multislice.data));
    if length(output_multislice.data) == 1
        results.images(:,:, 1) = transpose(output_multislice.data.m2psi_tot);
    else
        for t = 1:length(output_multislice.data)
            results.images(:, :, t) = transpose(output_multislice.data(t).m2psi_tot);
        end
    end
end
    
end



end

